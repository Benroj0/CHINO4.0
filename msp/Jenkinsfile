pipeline {
    agent any

    tools {
        maven 'MAVEN_HOME'
    }

    environment {
        DOCKER_PROJECT_NAME = 'msp'
        SONARQUBE_INSTANCE = 'sonarqube'
        SERVICES = "config-server gateway marketchino-master registry-server report-ms auth-server"
        DB_NAME = "chinomarket"
        DB_USER = "chinomarketserver"
        DB_PASSWORD = "chinomarket2025"
        REPO_URL = "https://github.com/Fabri-art/proyecto_Dockerizado.git"
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def services = env.SERVICES.split()
                    withSonarQubeEnv(env.SONARQUBE_INSTANCE) {
                        for (svc in services) {
                            dir("msp/${svc}") {
                                echo "üìä Analizando ${svc}..."
                                sh 'mvn clean verify sonar:sonar -DskipTests'
                            }
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    echo "‚úÖ Esperando resultados del an√°lisis..."
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build and Dockerize') {
            steps {
                script {
                    def services = env.SERVICES.split()

                    for (svc in services) {
                        def imageName = "${svc.toLowerCase()}:latest"
                        echo "‚öô Construyendo imagen local para ${svc}..."

                        dir("msp/${svc}") {
                            sh 'mvn clean package -DskipTests'
                            sh "docker build -t ${imageName} ."
                        }
                    }
                }
            }
        }

        stage('Clean Database Volume') {
            steps {
                script {
                    echo 'üßπ Eliminando volumen PostgreSQL para reinicializaci√≥n...'
                    sh 'docker volume rm msp_postgres_data || true'
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                dir('msp') {
                    script {
                        echo 'üöÄ Levantando microservicios con Docker Compose...'

                        try {
                            sh "docker-compose -f docker-compose.yml -p ${env.DOCKER_PROJECT_NAME} down -v --remove-orphans"
                        } catch (Exception e) {
                            echo "‚ö† No hab√≠a contenedores corriendo"
                        }

                        sh "docker-compose -f docker-compose.yml -p ${env.DOCKER_PROJECT_NAME} up -d --build"

                        echo '‚è≥ Esperando 30 segundos para levantar contenedores...'
                        sleep(30)

                        sh "docker ps"
                        sh "docker logs --tail 100 gateway || true"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üèÅ === FINAL DEL PIPELINE ==='
        }
        success {
            echo 'üéâ ‚úì Microservicios desplegados correctamente'
        }
        failure {
            echo 'üí• ‚úó El pipeline fall√≥, revisar errores'
        }
    }
}